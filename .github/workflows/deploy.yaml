name: Feature Flags Deployment

on:
  push:
    branches:
      - "feature/*"
  workflow_dispatch:
      
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend:${{ github.sha }} ./backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend:${{ github.sha }}

      - name: Build & Push Frontend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/todo-frontend:${{ github.sha }} ./frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-frontend:${{ github.sha }}

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.30.0

      - name: Configure Kubeconfig
        shell: powershell
        run: |
          if (-Not (Test-Path "$env:USERPROFILE\.kube")) {
            New-Item -ItemType Directory -Path "$env:USERPROFILE\.kube" | Out-Null
          }
          Set-Content -Path "$env:USERPROFILE\.kube\config" -Value "${{ secrets.KUBECONFIG_CONTENT }}"

      # Create Namespace
      - name: Create Namespace
        run: kubectl create namespace feature-flags-demo --dry-run=client -o yaml | kubectl apply -f -

      # Deploy MongoDB
      - name: Deploy MongoDB
        run: |
          kubectl apply -f k8s/mongodb.yaml --namespace feature-flags-demo
          kubectl rollout status deployment/mongodb --namespace feature-flags-demo

      # Deploy Backend & Frontend
      - name: Deploy Backend & Frontend
        run: |
          kubectl apply -f k8s/backend-deployment.yaml --namespace feature-flags-demo
          kubectl apply -f k8s/frontend-deployment.yaml --namespace feature-flags-demo

      # Apply ConfigMap for non-sensitive values
      - name: Apply ConfigMap for Backend
        run: kubectl create configmap backend-config --from-literal=ALGORITHM=HS256 --from-literal=ACCESS_TOKEN_EXPIRE_MINUTES=30 --namespace feature-flags-demo --dry-run=client -o yaml | kubectl apply -f -

      # Apply Secret for sensitive values
      - name: Apply Secrets for Backend
        run: kubectl create secret generic backend-secrets --from-literal=SECRET_KEY=${{ secrets.SECRET_KEY }} --from-literal=MONGO_URL=${{ secrets.MONGO_URL }} --namespace feature-flags-demo --dry-run=client -o yaml | kubectl apply -f -

      # Apply ConfigMap for Frontend
      - name: Apply ConfigMap for Frontend
        run: kubectl create configmap frontend-config --from-literal=REACT_APP_BACKEND_URL=${{ secrets.REACT_APP_BACKEND_URL }} --namespace feature-flags-demo --dry-run=client -o yaml | kubectl apply -f -

      # Deploy backend & frontend with new images
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/backend backend=${{ secrets.DOCKERHUB_USERNAME }}/todo-backend:${{ github.sha }} --namespace feature-flags-demo
          kubectl set image deployment/frontend frontend=${{ secrets.DOCKERHUB_USERNAME }}/todo-frontend:${{ github.sha }} --namespace feature-flags-demo
          kubectl rollout status deployment/backend --namespace feature-flags-demo
          kubectl rollout status deployment/frontend --namespace feature-flags-demo
